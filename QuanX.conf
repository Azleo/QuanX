# DivineEngine Quantumult 配置示例

# 以 ";" 或 "#" 或 "//" 开头的行为注释行。

# 最新完整的示例需查看 Quantumult X 里「配置文件」中的「示例」

# SS-URI scheme can be found at https://shadowsocks.org/en/spec/SIP002-URI-Scheme.html

[general]

# 建议在「其他设置」里「GeoLite2」的「来源」填写使用「 https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb 」并开启「自动更新」

;profile_img_url = http://www.example.com/example.png

# 资源解析器，可用于自定义各类远程资源的转换，如节点，规则 filter，复写 rewrite 等，url 地址可远程，可 本地/iCloud(Quantumult X/Scripts目录)
# resource_parser_url 示例可以在以下网站找到 https://raw.githubusercontent.com/crossutility/Quantumult-X/master/resource-parser.js
#
resource_parser_url=https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js

;network_check_url = http://bing.com

# Quantumult X 使用HTTP HEAD 对测试网址 server_check_url 进行网页响应性测试（第一项为节点TCP 握手，第二项为通过对应节点访问测试网页的HTTP 延迟，即HTTP响应时间与HTTP请求发起时间的插值。测试总耗时还包含除了第一项、第二项意外的时间开销，例如可能的TLS握手以及代理协议相关握手过程的开销），来确认节点的可用性。
# Quantumult X 主应用主动发起的测试的网络请求不会经由Quantumult X Tunnel（VPN），Quantumult X 主应用主动发起的测试的相关DNS也不会被Quantumult XTunnel （VPN）DNS模块处理。
# Quantumult 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页获得 HTTP 响应所需要时间。
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用。
#
server_check_url=http://www.google.com/generate_204
;server_check_url = http://www.gstatic.com/generate_204
;server_check_url = http://www.qualcomm.cn/generate_204
;server_check_url = http://cp.cloudflare.com/generate_204

#指定服务器测试时所使用的 User-Agent
#
;server_check_user_agent = Agent/1.0

# 节点延迟测试超时参数，需小于 5000 毫秒才生效，该值与包括 DNS 查询、TCP 握手、TLS 握手和应用层 HTTP 会话持续时间在内的检查过程的总持续时间进行比较，因此总持续时间可能明显长于“TCP 握手”和“HTTP 会话持续时间” 。
#
;server_check_timeout = 5000

# 指定DoH请求所使用的 User-Agent
#
;doh_user_agent = Agent/1.0

# geo_location_checker用于节点页面的节点信息展示，可完整自定义展示内容与方式。
#
;geo_location_checker = http://www.example.com/json/, https://www.example.com/script.js
;geo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/IP_API.js
;geo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/Orz-3/Orz-3/master/QuantumultX/IP.js
;geo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/limbopro/QuantumultX/master/Scripts/IP_API.js

# running_mode_trigger 模式下，与手动切换分流/直连/全局代理 等效。
# filter - 规则分流，all_proxy - 全部代理，all_direct - 全部直连
# 示例顺序：[蜂窝数据],[Wi-Fi],[SSID1],[SSID2]
# Rewrite 及 Task 模块始终生效，比 ssid 策略组设置简单，比 ssid-suspend 更灵活。
# 下列示例的意思为：在蜂窝数据使用规则分流(第一个 filter)，在 Wi-Fi 使用规则分流(第二个 filter)，在 SSID 为 LINK_22E171 的 Wi-Fi 使用全部代理，在 SSID 为 LINK_22E172 的 Wi-Fi 使用全部直连
#
;running_mode_trigger = filter, filter, LINK_22E171:all_proxy, LINK_22E172:all_direct

# dns_exclusion_list中的域名将不使用fake-ip方式. 其它域名则全部采用 fake-ip 及远程解析的模式
# dns_exclusion_list 包含了禁用占位符 IP (240.*) 的域，不在 dns_exclusion_list 中的域都启用了占位符 IP，并打开了 resolve-on-remote 设置
#
dns_exclusion_list = *.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me

# 默认当 DNS 层面某domain 被reject时，将返回loopback IP。你可以通过下面的参数修改成为 “no-error-no-answer”，或者 “nxdomain”，或者“none”。
# This will change the behavior to responding with NOERROR NOANSWER response or responding with NXDOMAIN response or none to disable the DNS level rejection feature. If you change the rejected domain to non-rejected(by changing configuration, filter or policy), it may take at most 10 seconds to take effect(TTL 10).
#
;dns_reject_domain_behavior = loopback

# 在特定 SSID 网络时(除了 Task 模块)暂停 Quantumult X
#
;ssid_suspended_list = LINK_22E174, LINK_22E175

# The enhanced_compatibility_ssid_list will be considered when global option 「Enhanced Compatibility」 is off in misc settings.
#
;enhanced_compatibility_ssid_list = LINK_22E174, LINK_22E175

# 留空代表所有端口都在表内。不在udp白名单列表中的端口，将被丢弃处理b并返回 ICMP  “端口不可达” 信息。
# 参数 udp_whitelist 从 IP 层控制 UDP 数据是否需要舍弃；如舍弃，则该 UDP 请求不会进入规则模块以及策略模块，TCP/UDP 请求记录中也不会有相应的条目，但仍可在日志中查询到相关信息（日志等级 debug）。
# 该参数控制的是流入 Quantumult X Tunnel 的请求，并非 Quantumult X Tunnel 发出的请求，即不会作用于节点所使用的 UDP 目标端口。
#
;udp_whitelist = 53, 123, 1900, 80-443
udp_whitelist = 1-442, 444-65535

# udp_drop_list同udp_whitelist类似，但不会返回 ICMP “端口不可达” 信息，udp_whitelist名单仅处理 udp_whitelist名单中的端口
#
;udp_drop_list = 1900, 80

# Quantumult 将不会处理到 excluded_routes 的流量。修改后重启设备。
;excluded_routes = 192.168.0.0/16, 172.16.0.0/12, 100.64.0.0/10, 10.0.0.0/8
# Hearthstone: 24.105.30.129/32, 185.60.112.157/32, 185.60.112.158/32, 182.162.132.1/32
#
excluded_routes = 239.255.255.250/32

# 参数 fallback_udp_policy 的值仅支持末端策略（末端策略为经由规则模块和策略模块后所命中的策略，例如：direct、reject 以及节点；不支持内置策略 proxy 以及其它自定义策略）。默认为 reject。
# 当 UDP 请求经过规则模块以及策略模块后所命中的节点为 Quantumult X 所不支持 UDP 转发的节点（如：VMess、trojan），或支持 UDP 转发但未注明 udp-relay=true 的（例如：SS/SSR 且与服务器是否真实开启 UDP 转发无关），则 fallback_udp_policy 会被使用。
# 注意：如果您需要调整该参数的值为 direct，请务必清楚了解同一目标主机名 TCP 请求与 UDP 请求的源地址不同所造成的隐私及安全风险。
# 如果没有节点支持 UDP 转发，可取消下条注释（去除 ;）
#
;fallback_udp_policy = direct

;icmp_auto_reply = true

[dns]

server = 223.5.5.5
server = 114.114.114.114
server = 119.29.29.29
server = 8.8.8.8
address=/raw.githubusercontent.com/185.199.110.133
server=/*.asus.com/system
server=/*.miwifi.com/system
server=/*.tplogin.cn/system
server=/*.tplinklogin.net/system

# 查询结果只用于评估过滤器或通过直接策略连接，当通过服务器连接时，查询结果不会被使用，Quantumult 永远不会知道相关域名的目标 IP。

# circumvent-ipv4-answer和circumvent-ipv6-answer与上游DNS相关，如果所有来自上游的A或AAAA结果（IP）与此字段相关，则结果将被忽略并标记为失败（如所有上游DNS返回的所有结果均命中该条目，则判定为DNS查询失败）。
# 如果多个查询发送到不同的上游 DNS 服务器，并且第一个响应的上游结果与此字段匹配，Quantumult X Tunnel DNS 模块将等待其他上游服务器的结果。
# ？和 * 可用于规避-ipv4-answer 和规避-ipv6-answer。
# 如配置的上游 DNS 包含有去广告功能的 DNS 服务器，请勿使用该参数。
#
;circumvent-ipv4-answer = 127.0.0.1, 0.0.0.0
;circumvent-ipv6-answer = ::

# 当设置prefer-doh3时，DoH查询将尝试通过HTTP3进行DNS，如果失败则查询连接将回退到HTTP2。 由于 HTTP/2 和 HTTP/3 连接支持多路复用，因此当您更改此设置时，它可能不会立即生效，但您可以重新连接 Quantumult X Tunnel 或手动更改网络环境以使其立即生效。
#
;prefer-doh3

# 禁用系统 DNS
# 为了提高性能，会使用从当前网络(系统)中获取的 DNS 服务器，您可以使用“no-system”禁用此功能。
# 至少需要自定义一个 DNS 服务器（“server=223.5.5.5”）。
#
;no-system

# 禁用IPV6
# 当设置「no-ipv6」时，Quanumult X Tunnel 的 DNS 模块会直接让 AAAA 查询失败，但仍允许来自 IPv6 DNS 服务器的 A 查询。
#
;no-ipv6

# 配置DNS服务器，并发响应选取最优结果
# 如果iOS版本< iOS 13.0，则doh-servers的最大数量将被限制为1。如果iOS版本< iOS 15.0，则doh-servers的最大数量将被限制为2。
# 注意：如配置了 no-system，则请务必确保在忽略了部分自定义 DNS 的配置下至少有一个可用的自定义 DNS 配置。
# 当使用的 DoH 服务器不是基于 HTTP/2 时，DoH 将被暂时禁用，并使用常规服务器，直到下次启动 VPN 连接。
# 不允许在此为域名直接设置127.0.0.1。 如果您希望某个域名（例如：example.com）为127.0.0.1，只需将“host、example.com、reject”添加到“filter_local”部分即可。 拒绝操作将向查询返回 127.0.0.1 的 DNS 响应。
# 不建议在与防火墙相关的网络环境中使用，不确定 DoH 服务器是否总能被到达。
# 如果 DoH 服务器在您的国家或地区不是流行的 DNS 服务器，则不推荐使用，它可能会丢失 ISP DNS 服务器返回的 CDN 优化结果。
# 如果 DoH 服务器是一个反广告相关的服务器，则不推荐使用（Quantumult X 过滤模块对于被拒绝的域具有更好的性能，它可以避免客户端无休止的请求）。
# 当 DoH(DNS over HTTPS)或DoQ(DNS over QUIC)被设置时，系统和所有其他普通的（没有与之相关的特定域）服务器将被忽略。DoQ的默认端口是853，如情况允许，可以设置为其他端口：quic://dns.example.com:456。
# 多个（并发查询）DoQ或DoH服务器需要配置在同一行中，URL用逗号分隔，当DoH和DoQ服务都被设置时，查询将同时发送到所有服务器。
#
# doh-server=xx1.com,xx2.com,excluded_ssids=SSID1, SSID2
#
# 优先顺序：DoQ > DoH > 其他DNS
# 在特定的网络环境下忽略自定义 DNS 可在后方加上「excluded_ssids」相关字段。
#
# server=114.114.114.114, excluded_ssids=SSID1, SSID2
#
#例子
#
;doq-server = quic://dns1.example.com, quic://dns2.example.com
;doq-server = quic://dns.adguard.com, excluded_ssids=SSID1
;doq-server = quic://dns.adguard.com, included_ssids=SSID2
;doq-server = /*.example4.com/quic://dns.adguard.com, excluded_ssids=SSID3
#
;doh-server=xx1.com,xx2.com,excluded_ssids=SSID1, SSID2
;doh-server = /*.example3.com/https://doh.pub/dns-query, excluded_ssids=SSID2
#
;server = 8.8.8.8:53, excluded_ssids=SSID1
;server = 8.8.4.4:53, included_ssids=SSID2
#
#指定域名解析DNS，支持excluded_ssids/included_ssids
#
;server = /example0.com/system
;server = /example1.com/8.8.4.4
;server = /*.example2.com/223.5.5.5
;server = /example4.com/[2001:4860:4860::8888]:53
;address = /example5.com/192.168.16.18
;address = /example6.com/[2001:8d3:8d3:8d3:8d3:8d3:8d3:8d3]
#
# 支持alias 映射
#
;alias = /example7.com/another-example.com
#
#AliDNS
#
;doh-server = https://dns.alidns.com/dns-query
;doh-server = https://223.6.6.6/dns-query, excluded_ssids=SSID1
;doh-server = https://223.5.5.5/dns-query, included_ssids=SSID2

[policy]

url-latency-benchmark=♻️自动选择, server-tag-regex=.*, check-interval=600, tolerance=80, alive-checking=false
#
static=🚀节点选择, 👍手动切换, ♻️自动选择, server-tag-regex=.*
#
static=👍手动切换, direct, server-tag-regex=.*
#
;static=🍎苹果服务, direct, 👍手动切换, ♻️自动选择
;static=🐧腾讯, direct, 👍手动切换, ♻️自动选择
static = 🇨🇳国内IP, direct, 🚀节点选择, ♻️自动选择, server-tag-regex=.*
static=📺国际媒体, 🚀节点选择, ♻️自动选择, server-tag-regex=.*
static=🌍国外网站, 🚀节点选择, ♻️自动选择, server-tag-regex=.*
static =🐟漏网之鱼, 🚀节点选择, Direct, ♻️自动选择, server-tag-regex=.*

;static=特殊节点, server-tag-regex=^(?!.*(港|台|日|韩|坡|美|HK|US|TW|JP|KR|SG|Hong|Tai|Japan|Korea|Singapore|States)), img-url= https://XXX.com/XXX.png
;url-latency-benchmark=自动选择, server-tag-regex=.*, check-interval=600, tolerance=80

# 香港
# server-tag-regex=(?=.*(港|HK|(?i)Hong))^((?!(台湾|日本|新加坡|美国|韩国|狮城|南朝鲜|US|SG|JP|KR|TW|台灣|美國|韓國|獅城)).)*$, check-interval=600, tolerance=80

# 台湾
# server-tag-regex=(?=.*(台|TW|(?i)Taiwan))^((?!(香港|日本|新加坡|美国|韩国|狮城|南朝鲜|US|SG|JP|KR|HK|美國|韓國|獅城)).)*$,

# 日本
# server-tag-regex=(?=.*(日本|JP|(?i)Japan))^((?!(香港|台湾|新加坡|美国|韩国|狮城|南朝鲜|US|SG|KR|HK|TW|台灣|美國|韓國|獅城)).)*$

# 韩国
# server-tag-regex=(?=.*(KR|Korea|KOR|首尔|韩|韓|(?i)Korea))^((?!(香港|台湾|新加坡|美国|狮城|南朝鲜|US|SG|HK|TW|台灣|美國|獅城)).)*$

# 新加坡
# server-tag-regex=(?=.*(新加坡|狮城|SG|(?i)Singapore))^((?!(香港|台湾|日本|美国|韩国|南朝鲜|US|JP|KR|HK|TW|台灣|美國|韓國)).)*$

# 美国
# server-tag-regex=(?=.*(美国|美國|US|洛杉矶|西雅图|(?i)States|American))^((?!(香港|台湾|日本|新加坡|韩国|狮城|南朝鲜|SG|JP|KR|HK|TW|台灣|韓國|獅城)).)*$

# static=漏网之鱼, direct, proxy, 节点选择, 自动选择, 香港, 台湾, 日本, 韩国, 新加坡, 美国, PROXY, DIRECT, img-url=https://XXX.com/XXX.png

# 需要策略图标的在策略后加上：img-url=http://example.com/icon.png

# 类型：静态(static)
# 指向您手动选择的候选服务器。
;static = policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png

# 类型：可用(available)
# 指向候选服务器的第一个可用服务器(当策略被触发且策略结果不可用时，将立即启动并发 url 延迟测试。
# 如果当时没有网络请求接受策略，这意味着策略处于空闲状态，即使服务器关闭，测试也不会启动。那时，您可以通过手动启动测试来更新服务器状态，但是这没有任何意义)。
;available = policy-name-2, Sample-A, Sample-B, Sample-C

# 类型：负载均衡(round-robin)
# 指向在候选服务器中指向下一个服务器以进行下一次连接。
;round-robin = policy-name-3, Sample-A, Sample-B, Sample-C

# 类型：延迟测试(url-latency-benchmark)
# 策略指向具有最佳 URL 延迟(公差，单位毫秒)结果的服务器。
# 当用户在 Quantumult X 中手动启动 URL 测试时，策略结果也会被更新。
# 该类型的策略有一个名为 check-interval(秒) 的参数，如果此策略已经被任何请求激活，则将考虑该间隔。
;url-latency-benchmark = policy-name-9, resource-tag-regex=^sample, server-tag-regex=^example, check-interval=600, alive-checking=false, tolerance=0

# dest-hash policy points to the server according to hash function that uses the destination address (domain or IP) as input. This policy is particularly useful for use cases that require session persistence. Adding or removing servers from the policy may change the results.
# dest-hash 策略根据使用目标地址（域或 IP）作为输入的哈希函数指向服务器。 此策略对于需要会话持久性的用例特别有用。 从策略中添加或删除服务器可能会更改结果。
;dest-hash = policy-name-8, resource-tag-regex=^sample, server-tag-regex=^example

# server-tag-regex 以及 resource-tag-regex 参数用于正则筛选来建立策略组，仅适用于 static、available 和 round-robin 类型的策略。
# 教程部分: https://shrtm.nu/DAFP

;static = policy-name-5, resource-tag-regex = ^sample, server-tag-regex = ^example, img-url = http://example.com/icon.png
;available = policy-name-6, resource-tag-regex = ^sample, server-tag-regex = ^example
;round-robin = policy-name-7, resource-tag-regex = ^sample, server-tag-regex = ^example

#以下是quantumultX的3普通种策略组类型写法，也可以用正则参数 server-tag-regex 或者 resource-tag-regex 来筛选
;static=policy-name-1, Sample-A, Sample-B, Sample-C
;available=policy-name-2, Sample-A, Sample-B, Sample-C
;round-robin=policy-name-3, Sample-A, Sample-B, Sample-C
;url-latency-benchmark=policy-name-4, Sample-A, Sample-B, Sample-C
;dest-hash=policy-name-5, Sample-A, Sample-B, Sample-C

# SSID
# 策略根据网络环境的不同指向服务器。
;ssid = policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C

[server_remote]

#

#

#  _    _   ______   _____    ______   _ 
# | |  | | |  ____| |  __ \  |  ____| | |
# | |__| | | |__    | |__) | | |__    | |
# |  __  | |  __|   |  _  /  |  __|   | |
# | |  | | | |____  | | \ \  | |____  |_|
# |_|  |_| |______| |_|  \_\ |______| (_)
#     
#远程服务器订阅模块，可直接订阅SSR，SS链接，以及Quantumult X格式的vmess/trojan/https订阅。
# "tag" 、"force-policy"和 "enabled" 为可选参数，分别表示 “标签”、“强制策略”和“开启状态”。
# update-interval 为更新时间参数，单位 秒, 默认更新时间为 24*60*60=86400 秒，负数表示禁用自动同步。
# opt-parser 用于控制是否对本订阅 开启资源解析器，不写或者 false 表示不启用解析器。
# 如果设置了 require-devices，则仅当当前 Quantumult 设备 ID 属于 require-devices 时才会加载此行配置。 Quantumult 设备 ID 可以在“设置 - 其他设置 - 关于”中找到。
# 当存在force-policy时，远程资源过滤器中的策略将被忽略，而强制使用该force-policy。
#
;https://example.com/server.snippet, tag=Sample-01, opt-parser=true, update-interval=-1, as-policy=static, img-url=http://example.com/icon.png, require-devices=ID1, ID2, enabled=false

[filter_remote]

# 修正直连
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Direct/Direct.list, tag=✏️直连修正, force-policy=direct, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/AdvertisingLite/AdvertisingLite.list, tag=🛑去广告Lite, force-policy=reject, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Hijacking/Hijacking.list, tag=🛑反劫持, force-policy=reject, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Privacy/Privacy.list, tag=🛑隐私保护, force-policy=reject, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Apple/Apple.list, tag=🍎苹果服务, force-policy=direct, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Tencent/Tencent.list, tag=🐧腾讯, force-policy=direct, update-interval=172800, opt-parser=false, enabled=true
#
;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/ChinaMax/ChinaMax.list, tag=🇨🇳国内网站/IP合集, force-policy=🇨🇳国内IP, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/China/China.list, tag=🇨🇳国内网站, force-policy=🇨🇳国内IP, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GlobalMedia/GlobalMedia.list, tag=📺国际媒体, force-policy=📺国际媒体, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Global/Global.list, tag=🌍国外网站, force-policy=🌍国外网站, update-interval=86400, opt-parser=false, enabled=true
#
# 远程分流模块，可使用force-policy来强制使用策略偏好, 替换远程规则内所指定的策略组
# 可使用force-policy 来设置多条规则指向同一策略
;FILTER_LAN, tag=LAN, force-policy=direct, enabled=true
;FILTER_REGION, tag=CN, force-policy=direct, enabled=true
#
;https://example.com/filter.snippet, tag=Sample, force-policy=your-policy-name, require-devices=ID1, ID2, enabled=true
#
# 参数「tag」、「force-policy」和「enabled」是可选的。
# 当有强制策略时，远程资源的过滤器中的策略将被忽略，并使用强制策略。
#

[rewrite_remote]
#
# 参数「tag」和「enabled」是可选的。
#
;https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/config/QX.snippet, tag=Sub Store, update-interval=86400, opt-parser=false, enabled=true
#
;https://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.quanx.tf.conf, tag=Boxjs, update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/QuantumultX/AdvertisingLite/AdvertisingLite.conf, tag=复写去广告(严格版), update-interval=86400, opt-parser=false, enabled=true
#
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/YouTubeAds.conf, tag=YouTube去广告 , update-interval=86400, opt-parser=false, enabled=true

https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=神机重定向, update-interval=86400, opt-parser=false, enabled=true


#
# Only obfs=http, obfs=ws, obfs=wss can have optional "obfs-uri" field.
# The obfs-host param in wss will be used for TLS handshake and for HTTP header host field, if obfs-host is not set for wss the server address will be used.
# When using obfs=ws and obfs=wss the server side can be deployed by v2ray-plugin with mux = 0 or by v2ray-core or the trojan-go.
# It is worth noting that the udp-over-tcp for shadowsocks is only supported by the server deployed with shadowsocksr python version, other versions only support the UDP relay itself. If you are combing udp-relay and udp-over-tcp for shadowsocks you must be sure your server is deployed with shadowsocksr python version.
# It is worth noting that the obfs=tls is different from the obfs=over-tls. The obfs=tls is the obfuscation plugin related to shadowsocks project, it is just an obfuscation of the TLS protocol. The obfs=over-tls is the TLS protocol. Quantumult X supports both of them for shadowsocks.
# The obfs plugin tls1.2_ticket_auth has one more RTT than tls1.2_ticket_fastauth and obfs tls, you'd better use tls1.2_ticket_fastauth instead.
# The method chacha20-ietf-poly1305 and chacha20-poly1305 have the same effect in VMess configuration.
# The tls-cert-sha256 or tls-pubkey-sha256 used for SSL pinning can be generated by openssl using below commands:
# openssl x509 -noout -fingerprint -sha256 -inform pem -in your-cert.pem
# openssl x509 -inform pem -pubkey -noout < your-cert.pem | openssl pkey -pubin -outform der | openssl dgst -sha256
# If the tls-verification is false then the tls-cert-sha256 and tls-pubkey-sha256 will be ignored.
# If the tls-pubkey-sha256 is set then the tls-cert-sha256 will be ignored.
# The optional tls-alpn for TLS is hex format of the ALPN extension content, eg: "02:68:32:08:68:74:74:70:2f:31:2e:31" or "02683208687474702f312e31" represents ALPN "h2" and "http/1.1" ({2, 'h', '2', 8, 'h', 't', 't', 'p', '/', '1', '.', '1'})
# The tls-no-session-ticket param for TLS is optional, this is only for special use cases. By default session ticket is enabled (tls-no-session-ticket=false). If you want to disable sessioin ticket just set tls-no-session-ticket=true, keep in mind that the session may still be reused from session ID for new connection if server supports it.
# The tls-no-session-reuse param for TLS is optional, this is only for special use cases. By default session reuse is enabled (tls-no-session-reuse=false). If you want to disable sessioin reuse just set tls-no-session-reuse=true, this will force Quantumult X perform a full TLS handshake for every new connection.
# The tls13 param has been deprecated (deprecated since v1.0.26), and TLS version 1.3 is always supported no matter what you set.
# The obfs=http for shadowsocks protocol follows the shadowsocks project's simple-obfs plugin. The obfs=http for VMess protocol follows V2Ray's implementation. These 2 obfuscations are totally different. Sometimes to comply with your special server settings (「shadowsocks」 + 「http obfuscation of VMess」 or 「VMess」 + 「http obfuscation of shadowsocks」. The latter rarely happens, and the former happens when the server side deployed by V2Ray (or similar programs) with shadowsocks protocol and V2Ray built-in http obfuscation), you may set obfs=vemss-http for shadowsocks protocol, or obfs=shadowsocks-http for vmess protocol.
#
[server_local]
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=ss-obfs-http-01
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, tag=ss-obfs-http-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=tls, obfs-host=bing.com, fast-open=false, udp-relay=false, tag=ss-obfs-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, fast-open=false, udp-relay=false, tag=ss-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=ss-tls-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, fast-open=false, udp-relay=false, tag=ss-tls-03
;shadowsocks=example.com:443, method=chacha20, password=pwd, ssr-protocol=auth_chain_b, ssr-protocol-param=def, obfs=tls1.2_ticket_fastauth, obfs-host=bing.com, tag=ssr
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, fast-open=false, udp-relay=false, tag=ss-ws-01
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-02
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-tls-01
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=ss-ws-tls-02
;shadowsocks=example.com:80, method=chacha20, password=pwd, fast-open=false, udp-relay=true, udp-over-tcp=true, tag=ss-udp-over-tcp
#
# To disable aead header for vmess, just set aead=false, the default value is true. If your server(V2Ray) version is less than v4.28 please set aead=false
;vmess=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-01
;vmess=example.com:80, method=aes-128-gcm, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, aead=false, tag=vmess-02
;vmess=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, fast-open=false, udp-relay=false, tag=vmess-tls-01
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=vmess-http
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, fast-open=false, udp-relay=false, tag=vmess-tls-02
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, tls13=true, fast-open=false, udp-relay=false, tag=vmess-tls-03
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-01
;vmess=192.168.1.1:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-02
;vmess=example.com:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-01
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-02
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=vmess-ws-tls-03
#
# The obfs field is not supported for http
;http=example.com:80,fast-open=false, udp-relay=false, tag=http-01
;http=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=http-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=http-tls-01
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=http-tls-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, fast-open=false, udp-relay=false, tag=http-tls-03
#
;socks5=example.com:80,fast-open=false, udp-relay=false, tag=socks5-01
;socks5=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=socks5-02
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=socks5-tls-01
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=socks5-tls-02
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, fast-open=false, udp-relay=false, tag=socks5-tls-03
#
# The obfs field is only supported with websocket over tls for trojan. When using websocket over tls you should not set over-tls and tls-host options anymore, instead set obfs=wss and obfs-host options.
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-01
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-02
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-03
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-04
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-05
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-06
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-07
;trojan=192.168.1.1:443, password=pwd, obfs=wss, obfs-host=example.com, obfs-uri=/path, udp-relay=true, tag=trojan-wss-05

[filter_local]

# 如开启其他设置中的  “分流匹配优化” 选项，则匹配优先级如下：
# host > host-suffix > host-keyword(wildcard) > geoip = ip-cidr > user-agennt

# User-Agent 匹配
;user-agent, ?abc*, proxy

# 完整域名匹配
;host, www.google.com, proxy

# 域名后缀匹配
;host-suffix, googleapis.com, proxy
# 强制分流走蜂窝网络
;host-suffix, googleapis.com, proxy, force-cellular
# 让分流走蜂窝网络跟 Wi-Fi 中的优选结果
;host-suffix, googleapis.com, proxy, multi-interface
# 让分流走蜂窝网络跟 Wi-Fi 中的负载均衡，提供更大带宽出入接口
;host-suffix, googleapis.com, proxy, multi-interface-balance
# 指定分流走特定网络接口
;host-suffix, googleapis.com, proxy, via-interface=pdp_ip0

# 域名关键词匹配
;host-keyword, adsite, reject

# 域名通配符匹配
;host-wildcard, *.goo?le.com, proxy

;ip6-cidr, 2001:4860:4860::8888/32, direct

# Local Area Network 局域网
host-suffix, local, direct
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 224.0.0.0/24, direct
ip6-cidr, fe80::/10, direct

;geoip, cn, direct
;geoip, cn, direct, force-cellular
;ip-asn, 6185, proxy
# You can add below host-keyword rule to skip the DNS query for all the non-matched hosts. Pure IP requests won't be matched by the host related rules.
;host-keyword, ., proxy

# final为必须规则，不可删除！
# 可修改对应策略组或节点
# 未命中远程&本地规则的剩余请求，将走final指定的节点/策略。
final, 🐟漏网之鱼


#
# The "reject" returns HTTP status code 404 with no content. This type of rewrite has some kind of dynamic delay (0~5 seconds) mechanism of response for repeated requests in a short period of time. The less the repetition, the shorter the delay (0). The more the repetition, the greater the delay (5).
# The "reject-200" returns HTTP status code 200 with no content.
# The "reject-img" returns HTTP status code 200 with content of 1px gif.
# The "reject-dict" returns HTTP status code 200 with content of empty json object.
# The "reject-array" returns HTTP status code 200 with content of empty json array.
# The "request-header" works for all the http headers not just one single header, so you can match two or more headers including CRLF in one regular expression.
# The "echo-response" just reply back the body of the content type response for matched URL, the body file should be saved at "On My iPhone - Quantumult X - Data".
# The length and encoding related HTTP header fields will be automatically processed by Quantumult if the "rewrite" is body related, so you should not handle them by yourself. The max supported original response body size is 4 MB(iOS 13+) for script-response-body.
# The body related rewrite will not be executed if the body is empty.
# When using javascript in rewrite, you can use those objects: $request, $response, $notify(title, subtitle, message), console.log(message) and Quantumult's built-in objects all have prefix "$".
# Supports: $request.sessionIndex, $request.scheme, $request.method, $request.url, $request.path, $request.headers,$response.sessionIndex, $response.statusCode, $response.headers, $response.body
# The $request.sessionIndex is equal to $response.sessionIndex when the response is related to the request. The sessionIndex has nothing to do with the index of TCP records in the orange "Activity" panel.
# The $notify(title, subtitle, message) will post iOS notifications if Quantumult notification has been enabled.
# The $prefs is for persistent store: $prefs.valueForKey(key), $prefs.setValueForKey(value, key), $prefs.removeValueForKey(key), $prefs.removeAllValues().
# The console.log(message)  will output logs to Quantumult log file.
# The setTimeout(function() { }, interval) will run function after interval(ms).
# The scripts for script-request-header, script-request-body, script-response-header, script-response-body, script-echo-response and script-analyze-echo-response should be saved in local "On My iPhone - Quantumult X - Scripts" or "iCloud Drive - Quantumult X - Scripts". Samples can be found at https://github.com/crossutility/Quantumult-X
# The difference between script-analyze-echo-response and script-echo-response is that the former will wait for the request body.
#
# The HTTP(HTTPS) request will be matched if the URL and the headers are both matched for the url-and-header rewrite (The URL will be evaluated first, and if it is not matched then the headers will not be evaluated at all). The string of the headers to compare contains the method, path and key-value headers.
#
[rewrite_local]
;^http://example\.com/resource1/1/ url reject
;^http://example\.com/resource1/2/ url reject-img
;^http://example\.com/resource1/3/ url reject-200
;^http://example\.com/resource1/4/ url reject-dict
;^http://example\.com/resource1/5/ url reject-array
;^http://example\.com/resource2/ url 302 http://example.com/new-resource2/
;^http://example\.com/resource3/ url 307 http://example.com/new-resource3/
;^http://example\.com/resource4/ url request-header ^GET /resource4/ HTTP/1\.1(\r\n) request-header GET /api/ HTTP/1.1$1
;^http://example\.com/resource4/ url request-header (\r\n)User-Agent:.+(\r\n) request-header $1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36$2
;^http://example\.com/resource5/ url request-body "info":\[.+\],"others" request-body "info":[],"others"
;^http://example\.com/resource5/ url response-body "info":\[.+\],"others" response-body "info":[],"others"
;^http://example\.com/resource5/ url echo-response text/html echo-response index.html
;^http://example\.com/resource6/ url script-response-body response-body.js
;^http://example\.com/resource7/ url script-echo-response script-echo.js
;^http://example\.com/resource8/ url script-response-header response-header.js
;^http://example\.com/resource9/ url script-request-header request-header.js
;^http://example\.com/resource10/ url script-request-body request-body.js
;^http://example\.com/resource1/1/ \r\nUser-Agent: example-agent url-and-header reject
;^http://example\.com/resource1/1/ ^POST url-and-header reject


#
# If the require-devices is set, this line of configuration will only be loaded when current Quantumult device ID belongs to the require-devices. The Quantumult device ID can be found in "Settings - Misc Settings - About".
# The $task.fetch() compose a HTTP request and deal with the response, only text body is supported. A $task.fetch() can be embeded in the completion handler of another $task.fetch(), if you want serial requests not current requests.
# The scripts should be saved in local "On My iPhone - Quantumult X - Scripts" or "iCloud Drive - Quantumult X - Scripts". Samples can be found at https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js
# The default HTTP request timeout is 10 seconds.
#
# Supports 5 or 6 fields of cron excluding the command field. The event-network will be triggered when network changed. The event-interaction will be triggered when user tapped a UIAction. The event related task only can be triggered when the Quantumult X Tunnel is running.
#
[task_local]

#
# $task.fetch() 组成一个 HTTP 请求并处理响应，只支持 text body。如果您想要 serial requests 而不是 current requests，可以将 $task.fetch() 嵌入到另一个 $task.fetch() 的完成处理程序中。
#
# 脚本应保存在本地「我的 iPhone - Quantumult X - Scripts」或「iCloud Drive - Quantumult X - Scripts」中。示例：https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js
#
# 默认的 HTTP 请求超时是 10 秒。
#
# 支持 5 或 6 个 cron 字段，不包括命令字段。
#

;* * * * * sample-task.js
;* * * * * sample-task2.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, enabled=true
;* * * * * sample-task3.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, require-devices=ID1, ID2, enabled=true
;event-network sample-task3.js
;event-interaction sample-task4.js
#
# Just like any web browser, http(s) url string after # is never sent to the server. You can add # to the script http(s) url to append customized params, and using API $environment.sourcePath to get the whole path (https://example.com/sample.js#this-is-not-sent-to-server&key1=value1&key2=value2) and extract the customized params in the script by yourself.
#
;* * * * * https://example.com/sample.js#this-is-not-sent-to-server&key1=value1&key2=value2, tag=Sample, enabled=true


#
# Deploy a local HTTP server and use JavaScript for data processing.
# If the require-devices is set, this line of configuration will only be loaded when current Quantumult device ID belongs to the require-devices. The Quantumult device ID can be found in "Settings - Misc Settings - About".
# The input variables are $reqeust.url, $reqeust.path, $reqeust.headers, $reqeust.body
# The output using $done like $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string") to sendback the response.
# Further more you can use a signature or any other validation method to verify if the request is legitimate.
# After the deployment you should visit it through http://127.0.0.1:9999/your-path/your-api/.
#
[http_backend]

#
# 部署一个本地 HTTP 服务器，并使用 JavaScript 进行数据处理。
# 输入变量为：$reqeust.url、$reqeust.path、$reqeust.headers、$reqeust.body。
# 使用 $done 输出像 $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string") 这样的返回响应。
# 此外，您还可以使用签名或任何其他验证方法来验证请求是否合法。
# 部署后您应该通过 http://127.0.0.1:9999/your-path/your-api/. 进行访问。服务器默认监听端口为 9999，您可以在UI中进行更改。
#

;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-backend.js, tag=fileConverter, path=^/example/v1/
;preference.js, tag=userPreference, path=^/preference/v1/, img-url=https://example.com, enabled=true
;sample.js, tag=sample, path=^/sample/v1/, require-devices=ID1, ID2, enabled=true
;convert.js, tag=fileConverter, path=^/convert/v1/


#
# If the source IP of the TCP connection is matched by the skip_src_ip, the hostname will not be evaluated. The wildcard * and ? are supported.
# If the destination IP of the TCP connection is matched by the skip_dst_ip, the hostname will not be evaluated. The wildcard * and ? are supported.
# Only the TLS SNI or destination address in "hostname" will be handled by MitM. The wildcard * and ? are supported.
#
# Important !!! You should always keep your CA passphrase and p12 private.
#
[mitm]

#
# 只有「hostname」中的 TLS SNI 或目标地址将被 MitM 处理。
#
# 默认情况下，当为 HTTPS 请求启用 MitM 时，Quantumult X 会从原站点获取证书（证书会被缓存），保留大部分需要的原始证书信息，并使用 MitM 的 root CA 重新签名，这是推荐的（也是比较兼容的）MitM 证书创建方式。
#
# 偶尔有些用户喜欢调试 HTTPS 请求，其域名不存在，所以原证书根本不存在。当参数 simple_cert_hostname 出现的时候。其 TLS SNI 名称在 simple_cert_hostname(及 hostname) 中的 HTTPS 请求将使用纯本地生成的 MitM 证书。
#
# 注意！！！您应该始终保护您的 CA 密码和 p12 的私密性。
#

;passphrase =
;p12 =
;skip_validating_cert = false
;skip_src_ip = 192.168.1.5, 192.168.1.6
;skip_dst_ip = 17.0.0.1
;hostname = *.example.com, *.sample.com, non-existed-domain.com, *.non-connected-domain.com
